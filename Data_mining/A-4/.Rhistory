View(binary_data_train
)
binary_data_train <- binary_data_train[2:13,]
View(binary_data_train)
binary_data_train <- binary_data_train[,2:13]
binary_data_train <- binary_data_train[2:13]
binary_data_train <- binary_data_train[2:12]
binary_data_train <- binary_data_train[2:11]
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
binary_data_train <- binary_data_train[2:11]
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
binary_data_train <- binary_data_train[2:12]
binary_data_train <- binary_data_train[2:11]
View(binary_data_train)
length(binary_data_train)
binary_data_train <- binary_data_train[2:11]
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
View(binary_data_train)
binary_data_train <- binary_data_train[2:11]
View(binary_data_train)
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
length(binary_data_train)
table_v1_v11 <- table(binary_data_train$V1, binary_data_train$V11)
table_v2_v11 <- table(binary_data_train$V2, binary_data_train$V11)
table_v3_v11 <- table(binary_data_train$V3, binary_data_train$V11)
table_v4_v11 <- table(binary_data_train$V4, binary_data_train$V11)
table_v5_v11 <- table(binary_data_train$V5, binary_data_train$V11)
table_v6_v11 <- table(binary_data_train$V6, binary_data_train$V11)
table_v7_v11 <- table(binary_data_train$V7, binary_data_train$V11)
table_v8_v11 <- table(binary_data_train$V8, binary_data_train$V11)
table_v9_v11 <- table(binary_data_train$V9, binary_data_train$V11)
table_v10_v11 <- table(binary_data_train$V10, binary_data_train$V11)
p_v1_v11 <- prop.table(table_v1_v11,2)
p_v2_v11 <- prop.table(table_v2_v11,2)
p_v3_v11 <- prop.table(table_v3_v11,2)
p_v4_v11 <- prop.table(table_v4_v11,2)
p_v5_v11 <- prop.table(table_v5_v11,2)
p_v6_v11 <- prop.table(table_v6_v11,2)
p_v7_v11 <- prop.table(table_v7_v11,2)
p_v8_v11 <- prop.table(table_v8_v11,2)
p_v9_v11 <- prop.table(table_v9_v11,2)
p_v10_v11 <- prop.table(table_v10_v11,2)
k$Var1
k[1]
k[2]
k[2,]
k[3,]
k[1,]
k[,1]
k[,2]
k[,3]
k[,1]
k[0,]
k[0,]
k[1,]
View(binary_data)
View(p_v2_v11)
View(p_v3_v11)
View(p_v3_v11)
p_v3_v11[,3]
p_v3_v11[,3]*p_v2_v11[,2]
p_v2_v11[,2]
prop.table(binary$V11)
prop.table(binary_data-train$V11)
prop.table(binary_data_train$V11)
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
length(binary_data_train)
binary_data_train <- binary_data[1:length(binary_data$V1)/2,]
length(binary_data_train)
length(binary_data_train$V1)
length(binary_data$V1)
binary_data_train <- binary_data[1:(length(binary_data$V1)/2),]
length(binary_data_train$V1)
binary_data_train <- binary_data[1:(length(binary_data$V1)/2),]
length(binary_data_train$V1)
table_v1_v11 <- table(binary_data_train$V1, binary_data_train$V11)
table_v2_v11 <- table(binary_data_train$V2, binary_data_train$V11)
table_v3_v11 <- table(binary_data_train$V3, binary_data_train$V11)
table_v4_v11 <- table(binary_data_train$V4, binary_data_train$V11)
table_v5_v11 <- table(binary_data_train$V5, binary_data_train$V11)
table_v6_v11 <- table(binary_data_train$V6, binary_data_train$V11)
table_v7_v11 <- table(binary_data_train$V7, binary_data_train$V11)
table_v8_v11 <- table(binary_data_train$V8, binary_data_train$V11)
table_v9_v11 <- table(binary_data_train$V9, binary_data_train$V11)
table_v10_v11 <- table(binary_data_train$V10, binary_data_train$V11)
p_v1_v11 <- prop.table(table_v1_v11,2)
p_v2_v11 <- prop.table(table_v2_v11,2)
p_v3_v11 <- prop.table(table_v3_v11,2)
p_v4_v11 <- prop.table(table_v4_v11,2)
p_v5_v11 <- prop.table(table_v5_v11,2)
p_v6_v11 <- prop.table(table_v6_v11,2)
p_v7_v11 <- prop.table(table_v7_v11,2)
p_v8_v11 <- prop.table(table_v8_v11,2)
p_v9_v11 <- prop.table(table_v9_v11,2)
p_v10_v11 <- prop.table(table_v10_v11,2)
prop.table(binary_data_train$V11)
View(prop.table(binary_data_train$V11))
View(prop.table(binary_data_train$V11,1))
View(prop.table(binary_data_train$V11,2))
View(prop.table(binary_data_train$V11))
j <- prop.table(binary_data_train$V11)
View(j)
sum(binary_data_train$V11 == 1)
sum(binary_data_train$V11 == 2)
sum(binary_data_train$V11 == 3)
number_1 <- sum(binary_data_train$V11 ==1)
number_2 <- sum(binary_data_train$V11 ==2)
number_3 <- sum(binary_data_train$V11 ==3)
P_1 <- number_1/length(binary_data_train$V11)
P_2 <- number_2/length(binary_data_train$V11)
P_3 <- number_3/length(binary_data_train$V11)
P1
P_1
P_2
P_3
View(j)
probs_v11_numbers <- c(P_1, P_2, P_3)
p_v3_v11[,3]*p_v2_v11[,2]*probs_v11_numbers
p_v3_v11[,3]*p_v2_v11[,2]
p_v3_v11[,3]
p_v3_v11[,3][0]
p_v3_v11[,3][0,]
p_v3_v11[,3][,0]
p_v3_v11[,3]
p_v3_v11[,3][1]
p_v3_v11[,3]binary_data_test <- binary_data[2501:5000,]
binary_data_test <- binary_data[2501:5000,]
binary_data <- read.csv('naive_bayes_binary.csv')
binary_data_train <- binary_data[1:(length(binary_data$V1)/2),]
binary_data_test <- binary_data[2501:5000,]
true_values <- binary_data_test$V11
binary_data_test <- binary_data_test[1:10]
for(i in binary_data_test){
    i
}
for(i in binary_data_test){
    print(i)
}
p_v3_v11[,3][1]
row <- binary_data_test[1,]
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
row[1]
p_v1_v11[row[1]+1]
p_v1_v11[as.numeric(row[1)]+1]
p_v1_v11[as.numeric(row[1)+1]
p_v1_v11[as.numeric(row[1])+1]
View(p_v1_v11)
row <- as.numeric(row)
return_probs <- function(row){
row <- as.numeric(row)
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
product_2 <- p_v1_v11[,2][row[1]+1]* p_v2_v11[,2][row[2]+1]* p_v3_v11[,2][row[3]+1]* p_v4_v11[,2][row[4]+1]*p_v5_v11[,2][row[5]+1]*p_6_v11[,2][row[6]+1]*p_v7_v11[,2][row[7]+1]*p_v8_v11[,2][row[8]+1]*p_v9_v11[,2][row[9]+1]*p_v10_v11[,2][row[10]+1]
product_3 <- p_v1_v11[,3][row[1]+1]* p_v2_v11[,3][row[2]+1]* p_v3_v11[,3][row[3]+1]* p_v4_v11[,3][row[4]+1]*p_v5_v11[,3][row[5]+1]*p_6_v11[,3][row[6]+1]*p_v7_v11[,3][row[7]+1]*p_v8_v11[,3][row[8]+1]*p_v9_v11[,3][row[9]+1]*p_v10_v11[,3][row[10]+1]
c(P_1*product_1, P_2*product_2, P_3*product3)
}
return_probs(current_row[1,])
return_probs(binary_data[1,])
return_probs(binary_data[1,])
return_probs <- function(row){
row <- as.numeric(row)
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_v6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
product_2 <- p_v1_v11[,2][row[1]+1]* p_v2_v11[,2][row[2]+1]* p_v3_v11[,2][row[3]+1]* p_v4_v11[,2][row[4]+1]*p_v5_v11[,2][row[5]+1]*p_v6_v11[,2][row[6]+1]*p_v7_v11[,2][row[7]+1]*p_v8_v11[,2][row[8]+1]*p_v9_v11[,2][row[9]+1]*p_v10_v11[,2][row[10]+1]
product_3 <- p_v1_v11[,3][row[1]+1]* p_v2_v11[,3][row[2]+1]* p_v3_v11[,3][row[3]+1]* p_v4_v11[,3][row[4]+1]*p_v5_v11[,3][row[5]+1]*p_v6_v11[,3][row[6]+1]*p_v7_v11[,3][row[7]+1]*p_v8_v11[,3][row[8]+1]*p_v9_v11[,3][row[9]+1]*p_v10_v11[,3][row[10]+1]
c(P_1*product_1, P_2*product_2, P_3*product3)
}
return_probs <- function(row){
row <- as.numeric(row)
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_v6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
product_2 <- p_v1_v11[,2][row[1]+1]* p_v2_v11[,2][row[2]+1]* p_v3_v11[,2][row[3]+1]* p_v4_v11[,2][row[4]+1]*p_v5_v11[,2][row[5]+1]*p_v6_v11[,2][row[6]+1]*p_v7_v11[,2][row[7]+1]*p_v8_v11[,2][row[8]+1]*p_v9_v11[,2][row[9]+1]*p_v10_v11[,2][row[10]+1]
product_3 <- p_v1_v11[,3][row[1]+1]* p_v2_v11[,3][row[2]+1]* p_v3_v11[,3][row[3]+1]* p_v4_v11[,3][row[4]+1]*p_v5_v11[,3][row[5]+1]*p_v6_v11[,3][row[6]+1]*p_v7_v11[,3][row[7]+1]*p_v8_v11[,3][row[8]+1]*p_v9_v11[,3][row[9]+1]*p_v10_v11[,3][row[10]+1]
c(P_1*product_1, P_2*product_2, P_3*product3)
}
binary_data
k <- return_probs(binary_data[1,])
return_probs <- function(row){
row <- as.numeric(row)
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_v6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
product_2 <- p_v1_v11[,2][row[1]+1]* p_v2_v11[,2][row[2]+1]* p_v3_v11[,2][row[3]+1]* p_v4_v11[,2][row[4]+1]*p_v5_v11[,2][row[5]+1]*p_v6_v11[,2][row[6]+1]*p_v7_v11[,2][row[7]+1]*p_v8_v11[,2][row[8]+1]*p_v9_v11[,2][row[9]+1]*p_v10_v11[,2][row[10]+1]
product_3 <- p_v1_v11[,3][row[1]+1]* p_v2_v11[,3][row[2]+1]* p_v3_v11[,3][row[3]+1]* p_v4_v11[,3][row[4]+1]*p_v5_v11[,3][row[5]+1]*p_v6_v11[,3][row[6]+1]*p_v7_v11[,3][row[7]+1]*p_v8_v11[,3][row[8]+1]*p_v9_v11[,3][row[9]+1]*p_v10_v11[,3][row[10]+1]
c(P_1*product_1, P_2*product_2, P_3*product_3)
}
k <- return_probs(binary_data[1,])
View(k)
sum(k)
max(k0
max(k)
match(max(k), k)
results <- c()
for(i in length(binary_data_test$V1){
    temp <- return_probs(binary_data[i,])
    results <- c(results, match(max(tem), temp))
}
for(i in 1:length(binary_data_test$V1)
{
    temp <- return_probs(binary_data_test[i,])
    results <- c(results, match(max(tem), temp))
}
for (i in 1:length(binary_data_test$V1){
results <- c()
for (i in 1:10){
    i
}
for (i in 1:length(binary_data_test$V1) {
for (i in 1:length(binary_data_test$V1)) {
    temp <- return_probs(binary_data_test[i,])
    results <- c(results, match(max(tem), temp))
}
for (i in 1:length(binary_data_test$V1)) {
    temp <- return_probs(binary_data_test[i,])
    results <- c(results, match(max(temp), temp))
}
View(results)
return_probs <- function(row){
row <- as.numeric(row)
product_1 <- p_v1_v11[,1][row[1]+1]* p_v2_v11[,1][row[2]+1]* p_v3_v11[,1][row[3]+1]* p_v4_v11[,1][row[4]+1]*p_v5_v11[,1][row[5]+1]*p_v6_v11[,1][row[6]+1]*p_v7_v11[,1][row[7]+1]*p_v8_v11[,1][row[8]+1]*p_v9_v11[,1][row[9]+1]*p_v10_v11[,1][row[10]+1]
product_2 <- p_v1_v11[,2][row[1]+1]* p_v2_v11[,2][row[2]+1]* p_v3_v11[,2][row[3]+1]* p_v4_v11[,2][row[4]+1]*p_v5_v11[,2][row[5]+1]*p_v6_v11[,2][row[6]+1]*p_v7_v11[,2][row[7]+1]*p_v8_v11[,2][row[8]+1]*p_v9_v11[,2][row[9]+1]*p_v10_v11[,2][row[10]+1]
product_3 <- p_v1_v11[,3][row[1]+1]* p_v2_v11[,3][row[2]+1]* p_v3_v11[,3][row[3]+1]* p_v4_v11[,3][row[4]+1]*p_v5_v11[,3][row[5]+1]*p_v6_v11[,3][row[6]+1]*p_v7_v11[,3][row[7]+1]*p_v8_v11[,3][row[8]+1]*p_v9_v11[,3][row[9]+1]*p_v10_v11[,3][row[10]+1]
c(P_1*product_1, P_2*product_2, P_3*product_3)
}
binary_data <- read.csv('naive_bayes_binary.csv')
binary_data_train <- binary_data[1:(length(binary_data$V1)/2),]
binary_data_test <- binary_data[2501:5000,]
true_values <- binary_data_test$V11
binary_data_test <- binary_data_test[1:10]
length(binary_data_train$V1)
table_v1_v11 <- table(binary_data_train$V1, binary_data_train$V11)
table_v2_v11 <- table(binary_data_train$V2, binary_data_train$V11)
table_v3_v11 <- table(binary_data_train$V3, binary_data_train$V11)
table_v4_v11 <- table(binary_data_train$V4, binary_data_train$V11)
table_v5_v11 <- table(binary_data_train$V5, binary_data_train$V11)
table_v6_v11 <- table(binary_data_train$V6, binary_data_train$V11)
table_v7_v11 <- table(binary_data_train$V7, binary_data_train$V11)
table_v8_v11 <- table(binary_data_train$V8, binary_data_train$V11)
table_v9_v11 <- table(binary_data_train$V9, binary_data_train$V11)
table_v10_v11 <- table(binary_data_train$V10, binary_data_train$V11)
p_v1_v11 <- prop.table(table_v1_v11,2)
p_v2_v11 <- prop.table(table_v2_v11,2)
p_v3_v11 <- prop.table(table_v3_v11,2)
p_v4_v11 <- prop.table(table_v4_v11,2)
p_v5_v11 <- prop.table(table_v5_v11,2)
p_v6_v11 <- prop.table(table_v6_v11,2)
p_v7_v11 <- prop.table(table_v7_v11,2)
p_v8_v11 <- prop.table(table_v8_v11,2)
p_v9_v11 <- prop.table(table_v9_v11,2)
p_v10_v11 <- prop.table(table_v10_v11,2)
View(prob_list)
number_1 <- sum(binary_data_train$V11 ==1)
number_2 <- sum(binary_data_train$V11 ==2)
number_3 <- sum(binary_data_train$V11 ==3)
P_1 <- number_1/length(binary_data_train$V11)
P_2 <- number_2/length(binary_data_train$V11)
P_3 <- number_3/length(binary_data_train$V11)
probs_v11_numbers <- c(P_1, P_2, P_3)
results <- c()
for (i in 1:length(binary_data_test$V1)) {
    temp <- return_probs(binary_data_test[i,])
    results <- c(results, match(max(temp), temp))
}
confusionmatrix(results, true_values)
confusionMatrix(results, true_values)
library('rpart')
student_data <- read.csv('student/student-mat.csv', sep=';')
student_data$class <- ifelse(student_data$G3 > 10,0,1)
new_dat <- student_data[1:30] 
View(stdent_data)
library('rpart')
student_data <- read.csv('student/student-mat.csv', sep=';')
View(student_data)
student_data$class <- ifelse(student_data$G3 > 10,0,1)
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[34])
sample_ind <- sample(nrow(new_dat),nrow(new_dat)*0.70)
train <- new_dat[sample_ind,]
test <- new_dat[-sample_ind,]
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
plot(fit)
printcp(fit)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
library('rpart')
student_data <- read.csv('student/student-mat.csv', sep=';')
student_data$class <- ifelse(student_data$G3 > 10,0,1)
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[34])
sample_ind <- sample(nrow(new_dat),nrow(new_dat)*0.70)
train <- new_dat[sample_ind,]
test <- new_dat[-sample_ind,]
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
test$pred <- predict(fit, test, type = "class")
base_accuracy <- mean(test$pred == test$class)
fit_pruned <- prune(fit, cp = 0.038)
test$pred <- predict(fit_pruned, test, type = "class")
accurcy_prune <- mean(test$pred == test$class)
base_accuracy
accurcy_prune
student_data_reg <- read.csv('student/student-mat.csv', sep=';')
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[33])
sample_ind <- sample(nrow(new_dat), nrow(new_dat)*0.70)
train_reg <- new_dat[sample_ind,]
test_reg <- new_dat[-sample_ind,]
set.seed(100)
fit_reg <- rpart(formula = G3~., data = train_reg, method = "anova", control = rpart.control(cp = -1))
plot(fit_reg)
printcp(fit_reg)
set.seed(100)
fit_reg <- rpart(formula = G3~., data = train_reg, method = "anova", control = rpart.control(cp = -1))
printcp(fit_reg)
test_reg$pred <- predict(fit_reg, test_reg, type = "vector")
base_error <- sum((test_reg$pred - test_reg$G3)^2)
fit_pruned_reg <- prune(fit_reg, cp = 0.027)
student_data_reg <- read.csv('student/student-mat.csv', sep=';')
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[33])
sample_ind <- sample(nrow(new_dat), nrow(new_dat)*0.70)
train_reg <- new_dat[sample_ind,]
test_reg <- new_dat[-sample_ind,]
set.seed(100)
fit_reg <- rpart(formula = G3~., data = train_reg, method = "anova", control = rpart.control(cp = -1))
printcp(fit_reg)
test_reg$pred <- predict(fit_reg, test_reg, type = "vector")
base_error <- sum((test_reg$pred - test_reg$G3)^2)
fit_pruned_reg <- prune(fit_reg, cp = 0.01126)
test_reg$pred_prune <- predict(fit_pruned_reg, test_reg, type = "vector")
pruned_error <- sum((test_reg$pred_prune - test_reg$G3)^2)
base_error
pruned_error
strange_data <- read.csv('strange_binary.csv')
set.seed(100)
fit_strange <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
printcp(fit_strange)
fit_pruned_strange <- prune(fit_strange, cp = 0.0312)
plot(fit_pruned_strange)
strange_predict <- predict(fit_pruned_strange, strange_data, type='class')
score <- mean(strange_predict == strange_data$c)
score
View(strange_data)
fit_pruned_strange
plot(fit_pruned_strange)
library('caret')
install.packages('caret')
install.packages('caret')
library('rpart')
student_data <- read.csv('student/student-mat.csv', sep=';')
student_data$class <- ifelse(student_data$G3 > 10,0,1)
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[34])
sample_ind <- sample(nrow(new_dat),nrow(new_dat)*0.70)
train <- new_dat[sample_ind,]
test <- new_dat[-sample_ind,]
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
plot(fit)
printcp(fit)
test$pred <- predict(fit, test, type = "class")
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
library('rpart')
student_data <- read.csv('student/student-mat.csv', sep=';')
student_data$class <- ifelse(student_data$G3 > 10,0,1)
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[34])
sample_ind <- sample(nrow(new_dat),nrow(new_dat)*0.70)
train <- new_dat[sample_ind,]
test <- new_dat[-sample_ind,]
set.seed(100)
fit <- rpart(formula = class~., data = train, method = "class", control = rpart.control(cp = -1))
printcp(fit)
test$pred <- predict(fit, test, type = "class")
base_accuracy <- mean(test$pred == test$class)
fit_pruned <- prune(fit, cp = 0.038)
test$pred <- predict(fit_pruned, test, type = "class")
accurcy_prune <- mean(test$pred == test$class)
base_accuracy
student_data_reg <- read.csv('student/student-mat.csv', sep=';')
new_dat <- student_data[1:30] 
new_dat <- cbind(new_dat, student_data[33])
sample_ind <- sample(nrow(new_dat), nrow(new_dat)*0.70)
train_reg <- new_dat[sample_ind,]
test_reg <- new_dat[-sample_ind,]
set.seed(100)
fit_reg <- rpart(formula = G3~., data = train_reg, method = "anova", control = rpart.control(cp = -1))
plot(fit_reg)
printcp(fit_reg)
test_reg$pred <- predict(fit_reg, test_reg, type = "vector")
base_error <- sum((test_reg$pred - test_reg$G3)^2)
fit_pruned_reg <- prune(fit_reg, cp = 0.01126)
test_reg$pred_prune <- predict(fit_pruned_reg, test_reg, type = "vector")
confusionMatrix(results, true_values)
library('caret')
confusionMatrix(results, true_values)
confusionMatrix(results, true_values)
View(results)
View(true_values)
confusionMatrix(results, true_values)
confusionMatrix(results, true_values)
strange_data <- read.csv('strange_binary.csv')
set.seed(100)
fit_strange <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
plot(fit_strange)
fit_strange
printcp(fit_strange)
fit_pruned_strange <- prune(fit_strange, cp = 0.0312)
plot(fit_pruned_strange)
strange_predict <- predict(fit_pruned_strange, strange_data, type='class')
score <- mean(strange_predict == strange_data$c)
score
plot(fit_reg)
plot(fit_pruned_reg)
rpart.plot(fit_pruned_reg)
rpart.plot(fit_pruned_reg)
library('rpart.plot')
rpart.plot(fit_pruned_reg)
test_reg$pred <- predict(fit_reg, test_reg, type = "vector")
base_error <- sum((test_reg$pred - test_reg$G3)^2)
fit_pruned_reg <- prune(fit_reg, cp = 0.025)
test_reg$pred_prune <- predict(fit_pruned_reg, test_reg, type = "vector")
pruned_error <- sum((test_reg$pred_prune - test_reg$G3)^2)
rpart.plot(fit_pruned_reg)
confusion <- table(results, true_values)
confusion
score
View(strange_data)
new_feature <- rowSums(strange_data[1:10])
View(new_feature)
strange_data$new_fet <- new_feature
fit_strange_new <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
printcp(fit_strange_new)
new_feature <- rowSums(strange_data[1:10])
strange_data$new_fet <- new_feature
fit_strange_new <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
printcp(fit_strange_new)
strange_data <- read.csv('strange_binary.csv')
set.seed(100)
fit_strange <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
plot(fit_strange)
printcp(fit_strange)
fit_pruned_strange <- prune(fit_strange, cp = 0.0312)
plot(fit_pruned_strange)
strange_predict <- predict(fit_pruned_strange, strange_data, type='class')
score <- mean(strange_predict == strange_data$c)
new_feature <- rowSums(strange_data[1:10])
strange_data$new_fet <- new_feature
set.seed(100)
fit_strange_new <- rpart(c~., data=strange_data, method='class', control = rpart.control(cp = 0))
printcp(fit_strange_new)
fit_pruned_strange_new <- prune(fit_strange_new, cp = 0.009375)
printcp(fit_pruned_strange_new)
k <- c((wins_decision_tree, wins_svm, wins_naive_bayes),(loss_decision_tree, loss_svm, loss_naive_bayes),(draw_decision_tree, draw_svm, draw_naive_bayes)
k <- c((wins_decision_tree, wins_svm, wins_naive_bayes),(loss_decision_tree, loss_svm, loss_naive_bayes),(draw_decision_tree, draw_svm, draw_naive_bayes))
k <- list((wins_decision_tree, wins_svm, wins_naive_bayes),(loss_decision_tree, loss_svm, loss_naive_bayes),(draw_decision_tree, draw_svm, draw_naive_bayes))
a <- c((wins_decision_tree, wins_svm, wins_naive_bayes))
as.matrix(a,b,c)
a <- c(wins_decision_tree, wins_svm, wins_naive_bayes)
b <- c(loss_decision_tree, loss_svm, loss_naive_bayes)
c <- c(draw_decision_tree, draw_svm, draw_naive_bayes)
classification_data <- read.csv('classification_accuracy.csv')
wins_decision_tree <- sum(classification_data$decision_tree > classification_data$svm) + sum(classification_data$decision_tree>classification_data$naive_bayes)
wins_svm <- sum(classification_data$svm > classification_data$decision_tree) + sum(classification_data$svm>classification_data$naive_bayes)
wins_naive_bayes <- sum(classification_data$naive_bayes > classification_data$svm) + sum(classification_data$naive_bayes>classification_data$decision_tree)
loss_decision_tree <- sum(classification_data$decision_tree < classification_data$svm) + sum(classification_data$decision_tree<classification_data$naive_bayes)
loss_svm <- sum(classification_data$svm < classification_data$decision_tree) + sum(classification_data$svm<classification_data$naive_bayes)
loss_naive_bayes <- sum(classification_data$naive_bayes < classification_data$svm) + sum(classification_data$naive_bayes<classification_data$decision_tree)
draw_decision_tree <- sum(classification_data$decision_tree == classification_data$svm) + sum(classification_data$decision_tree==classification_data$naive_bayes)
draw_svm <- sum(classification_data$svm == classification_data$decision_tree) + sum(classification_data$svm==classification_data$naive_bayes)
draw_naive_bayes <- sum(classification_data$naive_bayes == classification_data$svm) + sum(classification_data$naive_bayes==classification_data$decision_tree)
a <- c(wins_decision_tree, wins_svm, wins_naive_bayes)
b <- c(loss_decision_tree, loss_svm, loss_naive_bayes)
c <- c(draw_decision_tree, draw_svm, draw_naive_bayes)
as.matrix(a,b,c)
as.matrix(a,b,c)
as.matrix(a,b,c)
a <- c(wins_decision_tree, wins_svm, wins_naive_bayes)
a
b
c
rbind(a,b,c)
a <- c(wins_decision_tree, wins_naive_bayes, wins_svm)
b <- c(loss_decision_tree, loss_naive_bayes, loss_svm)
c <- c(draw_decision_tree, draw_naive_bayes, draw_svm)
k <- rbind(a,b,c)
k <- rbind(a,b,c)
rownames(k) = c('Decision_tree', 'Naive_bayes', 'SVM')
colnames(k[1]) = 'Wins'
colnames(k[2]) = 'Losses'
colnames(k[3]) = 'Draw'
colnames(k[1]) = 'Wins'
colnames(k[2]) = 'Losses'
colnames(k[3]) = 'Draw'
colnames(k) = c('Wins','Losses','Draw')
k
markdownToHtml('submit.rmd', 'k.html')
require(markdown)
markdownToHtml('submit.rmd', 'k.html')
markdownToHTML('submit.rmd', 'k.html')
markdownToHTML('submit.rmd', 'k.html')
markdownToHTML('submit.rmd', 'k.html')
knit2html('submit.rmd')
library('knitr')
knit2html('submit.rmd')
rmarkdown::render("submit.Rmd")
rmarkdown::render('submit.Rmd')
